//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/VisionOSInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace VisionProApp
{
    public partial class @VisionOSInputActions: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @VisionOSInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""VisionOSInputActions"",
    ""maps"": [
        {
            ""name"": ""VisionPro2D"",
            ""id"": ""984eea9e-53e7-4cbb-92d1-92517c4834c9"",
            ""actions"": [
                {
                    ""name"": ""TouchTap"",
                    ""type"": ""Button"",
                    ""id"": ""b4267b7b-696b-46bd-af1e-c0028b5a67dd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchPosition"",
                    ""type"": ""Value"",
                    ""id"": ""05f733f2-e1cd-496e-ad34-923b368fceb8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""720ef867-d056-4504-b12c-eca1c212ce4b"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchTap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f25168d1-b5b5-4d43-92b0-3f735fbe6097"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""VisionProVR"",
            ""id"": ""f44f8387-80c4-4f5f-ac20-bc4a6f6e8646"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""13efdf57-ebda-4f02-9319-2a82209195b5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d26bf584-7830-4216-99a2-915ef83a3416"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // VisionPro2D
            m_VisionPro2D = asset.FindActionMap("VisionPro2D", throwIfNotFound: true);
            m_VisionPro2D_TouchTap = m_VisionPro2D.FindAction("TouchTap", throwIfNotFound: true);
            m_VisionPro2D_TouchPosition = m_VisionPro2D.FindAction("TouchPosition", throwIfNotFound: true);
            // VisionProVR
            m_VisionProVR = asset.FindActionMap("VisionProVR", throwIfNotFound: true);
            m_VisionProVR_Newaction = m_VisionProVR.FindAction("New action", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // VisionPro2D
        private readonly InputActionMap m_VisionPro2D;
        private List<IVisionPro2DActions> m_VisionPro2DActionsCallbackInterfaces = new List<IVisionPro2DActions>();
        private readonly InputAction m_VisionPro2D_TouchTap;
        private readonly InputAction m_VisionPro2D_TouchPosition;
        public struct VisionPro2DActions
        {
            private @VisionOSInputActions m_Wrapper;
            public VisionPro2DActions(@VisionOSInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @TouchTap => m_Wrapper.m_VisionPro2D_TouchTap;
            public InputAction @TouchPosition => m_Wrapper.m_VisionPro2D_TouchPosition;
            public InputActionMap Get() { return m_Wrapper.m_VisionPro2D; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(VisionPro2DActions set) { return set.Get(); }
            public void AddCallbacks(IVisionPro2DActions instance)
            {
                if (instance == null || m_Wrapper.m_VisionPro2DActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_VisionPro2DActionsCallbackInterfaces.Add(instance);
                @TouchTap.started += instance.OnTouchTap;
                @TouchTap.performed += instance.OnTouchTap;
                @TouchTap.canceled += instance.OnTouchTap;
                @TouchPosition.started += instance.OnTouchPosition;
                @TouchPosition.performed += instance.OnTouchPosition;
                @TouchPosition.canceled += instance.OnTouchPosition;
            }

            private void UnregisterCallbacks(IVisionPro2DActions instance)
            {
                @TouchTap.started -= instance.OnTouchTap;
                @TouchTap.performed -= instance.OnTouchTap;
                @TouchTap.canceled -= instance.OnTouchTap;
                @TouchPosition.started -= instance.OnTouchPosition;
                @TouchPosition.performed -= instance.OnTouchPosition;
                @TouchPosition.canceled -= instance.OnTouchPosition;
            }

            public void RemoveCallbacks(IVisionPro2DActions instance)
            {
                if (m_Wrapper.m_VisionPro2DActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IVisionPro2DActions instance)
            {
                foreach (var item in m_Wrapper.m_VisionPro2DActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_VisionPro2DActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public VisionPro2DActions @VisionPro2D => new VisionPro2DActions(this);

        // VisionProVR
        private readonly InputActionMap m_VisionProVR;
        private List<IVisionProVRActions> m_VisionProVRActionsCallbackInterfaces = new List<IVisionProVRActions>();
        private readonly InputAction m_VisionProVR_Newaction;
        public struct VisionProVRActions
        {
            private @VisionOSInputActions m_Wrapper;
            public VisionProVRActions(@VisionOSInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Newaction => m_Wrapper.m_VisionProVR_Newaction;
            public InputActionMap Get() { return m_Wrapper.m_VisionProVR; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(VisionProVRActions set) { return set.Get(); }
            public void AddCallbacks(IVisionProVRActions instance)
            {
                if (instance == null || m_Wrapper.m_VisionProVRActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_VisionProVRActionsCallbackInterfaces.Add(instance);
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }

            private void UnregisterCallbacks(IVisionProVRActions instance)
            {
                @Newaction.started -= instance.OnNewaction;
                @Newaction.performed -= instance.OnNewaction;
                @Newaction.canceled -= instance.OnNewaction;
            }

            public void RemoveCallbacks(IVisionProVRActions instance)
            {
                if (m_Wrapper.m_VisionProVRActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IVisionProVRActions instance)
            {
                foreach (var item in m_Wrapper.m_VisionProVRActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_VisionProVRActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public VisionProVRActions @VisionProVR => new VisionProVRActions(this);
        public interface IVisionPro2DActions
        {
            void OnTouchTap(InputAction.CallbackContext context);
            void OnTouchPosition(InputAction.CallbackContext context);
        }
        public interface IVisionProVRActions
        {
            void OnNewaction(InputAction.CallbackContext context);
        }
    }
}
